# V·ªã tr√≠ l∆∞u: webgrabber/webgrabber/core/gui.py
import asyncio
import json
import os
import subprocess
import threading
import time
import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext, ttk, Toplevel, Text, simpledialog

from playwright._impl._errors import Error as PlaywrightError

from .audit_logger import log_audit
from .orchestrator import run_intelligent_capture
from .session_manager import SessionManager
from .config_manager import ConfigManager

class WebGrabberGUI:
    """The main class for the WebGrabber Graphical User Interface."""
    def __init__(self, root):
        self.root = root
        self.root.title("üåê WebGrabber - Intelligent Source Downloader")
        self.root.geometry("850x800")
        
        # Th√™m bi·∫øn ƒë·ªÉ qu·∫£n l√Ω vi·ªác h·ªßy t√°c v·ª•
        self.cancel_event = None
        
        self.config_manager = ConfigManager()
        self.create_menu()
        
        main_frame = ttk.Frame(root, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)

        # --- Khu v·ª±c nh·∫≠p URL ---
        ttk.Label(main_frame, text="üîó URL:", font=("Segoe UI", 10, "bold")).pack(pady=(0, 5), anchor="w")
        self.url_entry = ttk.Entry(main_frame, width=90)
        self.url_entry.pack(fill=tk.X, expand=True)

        # --- Khu v·ª±c ch·ªçn th∆∞ m·ª•c ƒë·∫ßu ra ---
        ttk.Label(main_frame, text="üíæ Output Directory:", font=("Segoe UI", 10, "bold")).pack(pady=(10, 5), anchor="w")
        out_frame = ttk.Frame(main_frame)
        out_frame.pack(fill=tk.X, expand=True)
        self.out_folder = tk.StringVar()
        ttk.Entry(out_frame, textvariable=self.out_folder).pack(side=tk.LEFT, fill=tk.X, expand=True)
        ttk.Button(out_frame, text="Browse...", command=self.choose_folder).pack(side=tk.LEFT, padx=(5, 0))

        # --- C√°c n√∫t h√†nh ƒë·ªông ---
        btn_frame = ttk.Frame(main_frame)
        btn_frame.pack(pady=20)
        self.download_btn = ttk.Button(btn_frame, text="‚¨áÔ∏è Start Download", command=self.start_download)
        self.download_btn.pack(side=tk.LEFT, padx=5, ipady=5)

        # TH√äM M·ªöI: N√∫t d·ª´ng t·∫£i
        self.stop_btn = ttk.Button(btn_frame, text="‚èπÔ∏è Stop Download", command=self.stop_download, state=tk.DISABLED)
        self.stop_btn.pack(side=tk.LEFT, padx=5, ipady=5)

        # --- Hi·ªÉn th·ªã ti·∫øn tr√¨nh v√† tr·∫°ng th√°i ---
        self.status_label = ttk.Label(main_frame, text="Ready.")
        self.status_label.pack(anchor="w", pady=(5, 0))
        self.progress = ttk.Progressbar(main_frame, orient="horizontal", mode="indeterminate")
        self.progress.pack(pady=5, fill=tk.X, expand=True)

        # --- Nh·∫≠t k√Ω ho·∫°t ƒë·ªông ---
        ttk.Label(main_frame, text="üßæ Activity Log:", font=("Segoe UI", 10, "bold")).pack(pady=(10, 5), anchor="w")
        self.log_text = scrolledtext.ScrolledText(main_frame, height=15, state=tk.DISABLED, font=("Courier New", 9))
        self.log_text.pack(fill=tk.BOTH, expand=True)

    def create_menu(self):
        """T·∫°o menu ch√≠nh c·ªßa ·ª©ng d·ª•ng."""
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        session_menu = tk.Menu(menubar, tearoff=0)
        session_menu.add_command(label="Login via Browser (Interactive)", command=self.interactive_login)
        session_menu.add_separator()
        session_menu.add_command(label="Import Cookies from Chrome", command=lambda: self.import_cookies('chrome'))
        session_menu.add_command(label="Import Cookies from Firefox", command=lambda: self.import_cookies('firefox'))
        menubar.add_cascade(label="Session", menu=session_menu)
        
        menubar.add_command(label="Settings", command=self.open_settings)
        
        help_menu = tk.Menu(menubar, tearoff=0)
        help_menu.add_command(label="Install Required Browsers", command=self._run_playwright_install)
        menubar.add_cascade(label="Help", menu=help_menu)
        
    def choose_folder(self):
        """M·ªü h·ªôp tho·∫°i ƒë·ªÉ ch·ªçn th∆∞ m·ª•c ƒë·∫ßu ra."""
        folder = filedialog.askdirectory()
        if folder: self.out_folder.set(folder)

    def interactive_login(self):
        """B·∫Øt ƒë·∫ßu qu√° tr√¨nh ƒëƒÉng nh·∫≠p t∆∞∆°ng t√°c trong m·ªôt lu·ªìng ri√™ng."""
        url = self.url_entry.get().strip()
        if not url:
            messagebox.showerror("Error", "Please enter a URL first.")
            return
        
        self.log_message("Starting interactive login... Please follow instructions in the new browser window.")
        threading.Thread(
            target=lambda: asyncio.run(SessionManager(url, self.log_message).interactive_login()),
            daemon=True
        ).start()

    def import_cookies(self, browser):
        """Nh·∫≠p cookie t·ª´ m·ªôt tr√¨nh duy·ªát ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh."""
        url = self.url_entry.get().strip()
        if not url:
            messagebox.showerror("Error", "Please enter a URL first.")
            return
            
        try:
            success = SessionManager(url, self.log_message).load_cookies_from_browser(browser)
            if success:
                messagebox.showinfo("Success", f"Cookies imported successfully from {browser.title()}!")
                self.log_message(f"Cookies imported from {browser.title()}.")
            else:
                messagebox.showwarning("Not Found", f"No relevant cookies were found in {browser.title()}.")
                self.log_message(f"Cookie import from {browser.title()} failed or found no cookies.")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to import cookies: {e}")
            self.log_message(f"Error importing cookies from {browser.title()}: {e}")

    def open_settings(self):
        """M·ªü c·ª≠a s·ªï c√†i ƒë·∫∑t n√¢ng cao."""
        SettingsWindow(self.root, self.config_manager)

    def log_message(self, msg: str):
        """Ghi m·ªôt th√¥ng b√°o v√†o GUI m·ªôt c√°ch an to√†n cho lu·ªìng."""
        def _log():
            self.log_text.config(state=tk.NORMAL)
            self.log_text.insert(tk.END, f"{time.strftime('%H:%M:%S')} - {msg}\n")
            self.log_text.see(tk.END)
            self.log_text.config(state=tk.DISABLED)
        self.root.after(0, _log)
        log_audit(msg)

    def _prompt_for_token(self, platform: str) -> str:
        """H√†m callback ƒë·ªÉ orchestrator y√™u c·∫ßu token."""
        self.log_message(f"ACTION REQUIRED: Please provide a token for {platform.title()}")
        token = simpledialog.askstring(
            f"{platform.title()} Token Required",
            f"Please enter your Personal Access Token for {platform.title()}:",
            parent=self.root,
            show='*'
        )
        return token or ""

    def start_download(self):
        """B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫£i xu·ªëng ch√≠nh trong m·ªôt lu·ªìng n·ªÅn."""
        url = self.url_entry.get().strip()
        folder = self.out_folder.get().strip()
        if not url or not folder:
            messagebox.showerror("Error", "URL and Output Directory are required.")
            return

        # N√ÇNG C·∫§P: Thi·∫øt l·∫≠p tr·∫°ng th√°i c√°c n√∫t v√† s·ª± ki·ªán h·ªßy
        self.cancel_event = threading.Event()
        self.download_btn.config(state=tk.DISABLED)
        self.stop_btn.config(state=tk.NORMAL)
        self.progress.start()
        self.status_label.config(text="Starting download...")

        def run_async():
            try:
                self.log_message(f"Starting intelligent download for {url}")
                file_tree = asyncio.run(
                    run_intelligent_capture(
                        url,
                        folder,
                        log_callback=self.log_message,
                        token_callback=self._prompt_for_token,
                        cancel_event=self.cancel_event # Truy·ªÅn s·ª± ki·ªán h·ªßy
                    )
                )
                # N√ÇNG C·∫§P: Ch·ªâ hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng n·∫øu kh√¥ng b·ªã h·ªßy
                if self.cancel_event and not self.cancel_event.is_set():
                    self.log_message(f"‚úÖ Download complete! {len(file_tree)} files processed.")
                    messagebox.showinfo("Success", f"Download finished. Check the output folder:\n{folder}")
            
            except PlaywrightError as e:
                if "Executable doesn't exist" in str(e):
                    self.log_message("‚ùå Playwright browsers not found.")
                    if messagebox.askyesno("Playwright Installation Required",
                                           "Required browser files are missing.\n\n"
                                           "This is necessary for the website capture strategy.\n\n"
                                           "Would you like to install them now? (This may take a few minutes)"):
                        self.root.after(0, self._run_playwright_install)
                else:
                    import traceback
                    self.log_message(f"‚ùå A Playwright error occurred: {e}\n{traceback.format_exc()}")
                    messagebox.showerror("Error", str(e))
            except Exception as e:
                # Kh√¥ng hi·ªÉn th·ªã l·ªói n·∫øu ƒë√≥ l√† do ng∆∞·ªùi d√πng h·ªßy
                if not (self.cancel_event and self.cancel_event.is_set()):
                    import traceback
                    self.log_message(f"‚ùå An error occurred: {e}\n{traceback.format_exc()}")
                    messagebox.showerror("Error", str(e))
            finally:
                self.root.after(0, self.reset_ui_after_download)
        
        threading.Thread(target=run_async, daemon=True).start()

    # TH√äM M·ªöI: H√†m ƒë·ªÉ d·ª´ng vi·ªác t·∫£i xu·ªëng
    def stop_download(self):
        """G·ª≠i t√≠n hi·ªáu cho lu·ªìng t·∫£i xu·ªëng ƒë·ªÉ d·ª´ng l·∫°i."""
        if self.cancel_event:
            self.log_message("‚èπÔ∏è Stop signal sent. Waiting for current operation to terminate...")
            self.cancel_event.set()
            self.stop_btn.config(state=tk.DISABLED)

    def reset_ui_after_download(self):
        """ƒê·∫∑t l·∫°i giao di·ªán ng∆∞·ªùi d√πng v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu sau khi t√°c v·ª• t·∫£i xu·ªëng ho√†n t·∫•t."""
        self.download_btn.config(state=tk.NORMAL)
        self.stop_btn.config(state=tk.DISABLED) # ƒê·∫£m b·∫£o n√∫t d·ª´ng b·ªã v√¥ hi·ªáu h√≥a
        self.progress.stop()
        self.status_label.config(text="Ready.")
        self.cancel_event = None

    def _run_playwright_install(self):
        """T·∫°o m·ªôt c·ª≠a s·ªï modal v√† ch·∫°y 'playwright install' trong m·ªôt lu·ªìng."""
        install_window = Toplevel(self.root)
        install_window.title("Installing Playwright Browsers...")
        install_window.geometry("700x400")
        install_window.transient(self.root)
        install_window.grab_set()

        log_area = scrolledtext.ScrolledText(install_window, state=tk.DISABLED, font=("Courier New", 9), wrap=tk.WORD, bg="black", fg="white")
        log_area.pack(expand=True, fill=tk.BOTH, padx=10, pady=10)

        status_label = ttk.Label(install_window, text="Starting installation...")
        status_label.pack(pady=(0, 10))

        def log_to_widget(msg):
            log_area.config(state=tk.NORMAL)
            log_area.insert(tk.END, msg)
            log_area.see(tk.END)
            log_area.config(state=tk.DISABLED)

        def run_install():
            self.root.after(0, lambda: self.download_btn.config(state=tk.DISABLED))
            self.root.after(0, log_to_widget, "Running 'python -m playwright install'...\nThis might take several minutes.\n\n")
            
            try:
                creation_flags = subprocess.CREATE_NO_WINDOW if os.name == 'nt' else 0
                process = subprocess.Popen(
                    ['python', '-m', 'playwright', 'install'], 
                    stdout=subprocess.PIPE, 
                    stderr=subprocess.STDOUT, 
                    text=True, 
                    encoding='utf-8',
                    creationflags=creation_flags
                )

                for line in iter(process.stdout.readline, ''):
                    self.root.after(0, log_to_widget, line)
                
                process.stdout.close()
                return_code = process.wait()

                if return_code == 0:
                    self.root.after(0, lambda: status_label.config(text="Installation successful! You can close this window."))
                    self.root.after(0, lambda: messagebox.showinfo("Success", "Browsers installed successfully!\nPlease try the download again.", parent=install_window))
                else:
                    self.root.after(0, lambda: status_label.config(text="Installation failed! See log for details."))
                    self.root.after(0, lambda: messagebox.showerror("Error", f"Installation failed with exit code {return_code}.\n\nRun 'python -m playwright install' manually to debug.", parent=install_window))
            except FileNotFoundError:
                 self.root.after(0, lambda: messagebox.showerror("Error", "Could not find 'python'. Please ensure Python is in your system PATH.", parent=install_window))
            except Exception as ex:
                self.root.after(0, lambda: messagebox.showerror("Error", f"An unexpected error occurred: {ex}", parent=install_window))
            finally:
                self.root.after(0, lambda: self.reset_ui_after_download())

        threading.Thread(target=run_install, daemon=True).start()

class SettingsWindow(Toplevel):
    """M·ªôt c·ª≠a s·ªï Toplevel ƒë·ªÉ ch·ªânh s·ª≠a file config.json c·ªßa ·ª©ng d·ª•ng."""
    def __init__(self, parent, config_manager):
        super().__init__(parent)
        self.config_manager = config_manager
        self.title("Advanced Settings")
        self.geometry("600x400")

        self.text_editor = Text(self, wrap="word", font=("Courier New", 10))
        self.text_editor.pack(side=tk.TOP, fill=tk.BOTH, expand=True, padx=10, pady=10)
        self.text_editor.insert("1.0", json.dumps(self.config_manager.get_config(), indent=4))
        
        btn_frame = ttk.Frame(self)
        btn_frame.pack(side=tk.BOTTOM, pady=10)
        ttk.Button(btn_frame, text="Save and Close", command=self.save_and_close).pack()

    def save_and_close(self):
        """L∆∞u c·∫•u h√¨nh v√† ƒë√≥ng c·ª≠a s·ªï."""
        try:
            new_config_str = self.text_editor.get("1.0", "end")
            new_config = json.loads(new_config_str)
            self.config_manager.save_config(new_config)
            self.destroy()
        except json.JSONDecodeError:
            messagebox.showerror("Error", "Invalid JSON format. Please correct it before saving.", parent=self)
        except Exception as e:
            messagebox.showerror("Error", f"Failed to save config: {e}", parent=self)

if __name__ == '__main__':
    root = tk.Tk()
    app = WebGrabberGUI(root)
    root.mainloop()

